// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: SvelteHtmlLexer.flex

package dev.blachut.svelte.lang.parsing.html;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.xml.*;
import com.intellij.psi.TokenType;
import dev.blachut.svelte.lang.psi.SvelteTokenTypes;
import com.intellij.lang.javascript.JSTokenTypes;


public class _SvelteHtmlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int DOC_TYPE = 2;
  public static final int COMMENT = 4;
  public static final int START_TAG_NAME = 6;
  public static final int END_TAG_NAME = 8;
  public static final int BEFORE_TAG_ATTRIBUTES = 10;
  public static final int TAG_ATTRIBUTES = 12;
  public static final int ATTRIBUTE_BRACES = 14;
  public static final int ATTRIBUTE_VALUE_START = 16;
  public static final int ATTRIBUTE_VALUE_BRACES = 18;
  public static final int ATTRIBUTE_VALUE_AFTER_BRACES = 20;
  public static final int ATTRIBUTE_VALUE_DQ = 22;
  public static final int ATTRIBUTE_VALUE_DQ_BRACES = 24;
  public static final int ATTRIBUTE_VALUE_SQ = 26;
  public static final int ATTRIBUTE_VALUE_SQ_BRACES = 28;
  public static final int PROCESSING_INSTRUCTION = 30;
  public static final int TAG_CHARACTERS = 32;
  public static final int C_COMMENT_START = 34;
  public static final int C_COMMENT_END = 36;
  public static final int SVELTE_INTERPOLATION_START = 38;
  public static final int SVELTE_INTERPOLATION_KEYWORD = 40;
  public static final int SVELTE_INTERPOLATION = 42;
  public static final int RAW_CONTENT = 44;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  7,  7,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 
    15, 15, 16, 16, 17, 17, 18, 18, 19, 19,  7,  7, 20, 20
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u1f00\1\u3500\1\u3600\1\u3700\1\u3800\1\u0100"+
    "\1\u3900\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u1f00"+
    "\1\u4000\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u1f00\1\u4c00\1\u4d00\1\u4e00"+
    "\1\u1f00\3\u0100\1\u4f00\1\u5000\1\u5100\12\u1f00\4\u0100\1\u5200"+
    "\17\u1f00\2\u0100\1\u5300\41\u1f00\2\u0100\1\u5400\1\u5500\2\u1f00"+
    "\1\u5600\1\u5700\27\u0100\1\u5800\2\u0100\1\u5900\45\u1f00\1\u0100"+
    "\1\u5a00\1\u5b00\11\u1f00\1\u5c00\27\u1f00\1\u5d00\1\u5e00\1\u5f00"+
    "\1\u6000\11\u1f00\1\u6100\1\u6200\5\u1f00\1\u6300\1\u6400\4\u1f00"+
    "\1\u6500\21\u1f00\246\u0100\1\u6600\20\u0100\1\u6700\1\u6800\25\u0100"+
    "\1\u6900\34\u0100\1\u6a00\14\u1f00\2\u0100\1\u6b00\u0e05\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\2\1\1\2\2\1\22\0\1\1\1\3\1\4"+
    "\1\5\1\6\1\0\1\7\1\10\2\11\3\0\1\12"+
    "\1\13\1\14\12\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\25"+
    "\1\32\1\33\1\34\2\32\1\35\1\36\1\32\1\37"+
    "\1\40\3\32\1\41\1\42\2\32\1\43\1\44\1\32"+
    "\1\45\1\46\1\47\1\0\1\50\1\51\1\52\1\53"+
    "\1\54\1\30\1\55\1\56\1\57\1\60\1\61\1\32"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\32\1\75\1\43\1\76\1\32"+
    "\1\77\1\11\1\100\7\0\1\101\32\0\1\2\11\0"+
    "\1\32\12\0\1\32\4\0\1\32\5\0\27\32\1\0"+
    "\37\32\1\0\u01ca\32\4\0\14\32\16\0\5\32\7\0"+
    "\1\32\1\0\1\32\201\0\5\32\1\0\2\32\2\0"+
    "\4\32\1\0\1\32\6\0\1\32\1\0\3\32\1\0"+
    "\1\32\1\0\24\32\1\0\123\32\1\0\213\32\10\0"+
    "\246\32\1\0\46\32\2\0\1\32\6\0\51\32\107\0"+
    "\33\32\4\0\4\32\55\0\53\32\43\0\2\32\1\0"+
    "\143\32\1\0\1\32\17\0\2\32\7\0\2\32\12\0"+
    "\3\32\2\0\1\32\20\0\1\32\1\0\36\32\35\0"+
    "\131\32\13\0\1\32\30\0\41\32\11\0\2\32\4\0"+
    "\1\32\5\0\26\32\4\0\1\32\11\0\1\32\3\0"+
    "\1\32\27\0\31\32\7\0\13\32\65\0\25\32\1\0"+
    "\10\32\106\0\66\32\3\0\1\32\22\0\1\32\7\0"+
    "\12\32\17\0\20\32\4\0\10\32\2\0\2\32\2\0"+
    "\26\32\1\0\7\32\1\0\1\32\3\0\4\32\3\0"+
    "\1\32\20\0\1\32\15\0\2\32\1\0\3\32\16\0"+
    "\2\32\12\0\1\32\10\0\6\32\4\0\2\32\2\0"+
    "\26\32\1\0\7\32\1\0\2\32\1\0\2\32\1\0"+
    "\2\32\37\0\4\32\1\0\1\32\23\0\3\32\20\0"+
    "\11\32\1\0\3\32\1\0\26\32\1\0\7\32\1\0"+
    "\2\32\1\0\5\32\3\0\1\32\22\0\1\32\17\0"+
    "\2\32\27\0\1\32\13\0\10\32\2\0\2\32\2\0"+
    "\26\32\1\0\7\32\1\0\2\32\1\0\5\32\3\0"+
    "\1\32\36\0\2\32\1\0\3\32\17\0\1\32\21\0"+
    "\1\32\1\0\6\32\3\0\3\32\1\0\4\32\3\0"+
    "\2\32\1\0\1\32\1\0\2\32\3\0\2\32\3\0"+
    "\3\32\3\0\14\32\26\0\1\32\64\0\10\32\1\0"+
    "\3\32\1\0\27\32\1\0\20\32\3\0\1\32\32\0"+
    "\3\32\5\0\2\32\36\0\1\32\4\0\10\32\1\0"+
    "\3\32\1\0\27\32\1\0\12\32\1\0\5\32\3\0"+
    "\1\32\40\0\1\32\1\0\2\32\17\0\2\32\22\0"+
    "\10\32\1\0\3\32\1\0\51\32\2\0\1\32\20\0"+
    "\1\32\5\0\3\32\10\0\3\32\30\0\6\32\5\0"+
    "\22\32\3\0\30\32\1\0\11\32\1\0\1\32\2\0"+
    "\7\32\72\0\60\32\1\0\2\32\14\0\7\32\72\0"+
    "\2\32\1\0\1\32\1\0\5\32\1\0\30\32\1\0"+
    "\1\32\1\0\12\32\1\0\2\32\11\0\1\32\2\0"+
    "\5\32\1\0\1\32\25\0\4\32\40\0\1\32\77\0"+
    "\10\32\1\0\44\32\33\0\5\32\163\0\53\32\24\0"+
    "\1\32\20\0\6\32\4\0\4\32\3\0\1\32\3\0"+
    "\2\32\7\0\3\32\4\0\15\32\14\0\1\32\21\0"+
    "\46\32\1\0\1\32\5\0\1\32\2\0\53\32\1\0"+
    "\115\32\1\0\4\32\2\0\7\32\1\0\1\32\1\0"+
    "\4\32\2\0\51\32\1\0\4\32\2\0\41\32\1\0"+
    "\4\32\2\0\7\32\1\0\1\32\1\0\4\32\2\0"+
    "\17\32\1\0\71\32\1\0\4\32\2\0\103\32\45\0"+
    "\20\32\20\0\126\32\2\0\6\32\3\0\u016c\32\2\0"+
    "\21\32\1\2\32\32\5\0\113\32\6\0\10\32\7\0"+
    "\15\32\1\0\4\32\16\0\22\32\16\0\22\32\16\0"+
    "\15\32\1\0\3\32\17\0\64\32\43\0\1\32\4\0"+
    "\1\32\103\0\131\32\7\0\5\32\2\0\42\32\1\0"+
    "\1\32\5\0\106\32\12\0\37\32\61\0\36\32\2\0"+
    "\5\32\13\0\54\32\4\0\32\32\66\0\27\32\11\0"+
    "\65\32\122\0\1\32\135\0\57\32\21\0\7\32\67\0"+
    "\36\32\15\0\2\32\12\0\54\32\32\0\44\32\51\0"+
    "\3\32\12\0\44\32\2\0\11\32\7\0\53\32\2\0"+
    "\3\32\51\0\4\32\1\0\6\32\1\0\2\32\3\0"+
    "\1\32\5\0\300\32\100\0\26\32\2\0\6\32\2\0"+
    "\46\32\2\0\6\32\2\0\10\32\1\0\1\32\1\0"+
    "\1\32\1\0\1\32\1\0\37\32\2\0\65\32\1\0"+
    "\7\32\1\0\1\32\3\0\3\32\1\0\7\32\3\0"+
    "\4\32\2\0\6\32\4\0\15\32\5\0\3\32\1\0"+
    "\7\32\3\0\13\2\35\0\2\101\5\0\1\2\57\0"+
    "\1\2\21\0\1\32\15\0\1\32\20\0\15\32\145\0"+
    "\1\32\4\0\1\32\2\0\12\32\1\0\1\32\3\0"+
    "\5\32\6\0\1\32\1\0\1\32\1\0\1\32\1\0"+
    "\4\32\1\0\13\32\2\0\4\32\5\0\5\32\4\0"+
    "\1\32\64\0\2\32\u017b\0\57\32\1\0\57\32\1\0"+
    "\205\32\6\0\4\32\3\0\2\32\14\0\46\32\1\0"+
    "\1\32\5\0\1\32\2\0\70\32\7\0\1\32\20\0"+
    "\27\32\11\0\7\32\1\0\7\32\1\0\7\32\1\0"+
    "\7\32\1\0\7\32\1\0\7\32\1\0\7\32\1\0"+
    "\7\32\120\0\1\32\320\0\1\2\4\0\2\32\52\0"+
    "\5\32\5\0\2\32\4\0\126\32\6\0\3\32\1\0"+
    "\132\32\1\0\4\32\5\0\53\32\1\0\136\32\21\0"+
    "\33\32\65\0\306\32\112\0\360\32\20\0\215\32\103\0"+
    "\56\32\2\0\15\32\3\0\20\32\12\0\2\32\24\0"+
    "\57\32\20\0\37\32\2\0\106\32\61\0\11\32\2\0"+
    "\147\32\2\0\65\32\2\0\5\32\60\0\13\32\1\0"+
    "\3\32\1\0\4\32\1\0\27\32\35\0\64\32\16\0"+
    "\62\32\76\0\6\32\3\0\1\32\1\0\2\32\13\0"+
    "\34\32\12\0\27\32\31\0\35\32\7\0\57\32\34\0"+
    "\1\32\20\0\5\32\1\0\12\32\12\0\5\32\1\0"+
    "\51\32\27\0\3\32\1\0\10\32\24\0\27\32\3\0"+
    "\1\32\3\0\62\32\1\0\1\32\3\0\2\32\2\0"+
    "\5\32\2\0\1\32\1\0\1\32\30\0\3\32\2\0"+
    "\13\32\7\0\3\32\14\0\6\32\2\0\6\32\2\0"+
    "\6\32\11\0\7\32\1\0\7\32\1\0\53\32\1\0"+
    "\14\32\10\0\163\32\35\0\244\32\14\0\27\32\4\0"+
    "\61\32\4\0\156\32\2\0\152\32\46\0\7\32\14\0"+
    "\5\32\5\0\1\32\1\0\12\32\1\0\15\32\1\0"+
    "\5\32\1\0\1\32\1\0\2\32\1\0\2\32\1\0"+
    "\154\32\41\0\153\32\22\0\100\32\2\0\66\32\50\0"+
    "\14\32\164\0\5\32\1\0\207\32\44\0\32\32\6\0"+
    "\32\32\13\0\131\32\3\0\6\32\2\0\6\32\2\0"+
    "\6\32\2\0\3\32\43\0\14\32\1\0\32\32\1\0"+
    "\23\32\1\0\2\32\1\0\17\32\2\0\16\32\42\0"+
    "\173\32\205\0\35\32\3\0\61\32\57\0\40\32\15\0"+
    "\24\32\1\0\10\32\6\0\46\32\12\0\36\32\2\0"+
    "\44\32\4\0\10\32\60\0\236\32\22\0\44\32\4\0"+
    "\44\32\4\0\50\32\10\0\64\32\234\0\67\32\11\0"+
    "\26\32\12\0\10\32\230\0\6\32\2\0\1\32\1\0"+
    "\54\32\1\0\2\32\3\0\1\32\2\0\27\32\12\0"+
    "\27\32\11\0\37\32\101\0\23\32\1\0\2\32\12\0"+
    "\26\32\12\0\32\32\106\0\70\32\6\0\2\32\100\0"+
    "\1\32\17\0\4\32\1\0\3\32\1\0\35\32\52\0"+
    "\35\32\3\0\35\32\43\0\10\32\1\0\34\32\33\0"+
    "\66\32\12\0\26\32\12\0\23\32\15\0\22\32\156\0"+
    "\111\32\67\0\63\32\15\0\63\32\15\0\44\32\334\0"+
    "\35\32\12\0\1\32\10\0\26\32\232\0\27\32\14\0"+
    "\65\32\113\0\55\32\40\0\31\32\32\0\44\32\35\0"+
    "\1\32\13\0\43\32\3\0\1\32\14\0\60\32\16\0"+
    "\4\32\25\0\1\32\1\0\1\32\43\0\22\32\1\0"+
    "\31\32\124\0\7\32\1\0\1\32\1\0\4\32\1\0"+
    "\17\32\1\0\12\32\7\0\57\32\46\0\10\32\2\0"+
    "\2\32\2\0\26\32\1\0\7\32\1\0\2\32\1\0"+
    "\5\32\3\0\1\32\22\0\1\32\14\0\5\32\236\0"+
    "\65\32\22\0\4\32\24\0\1\32\40\0\60\32\24\0"+
    "\2\32\1\0\1\32\270\0\57\32\51\0\4\32\44\0"+
    "\60\32\24\0\1\32\73\0\53\32\15\0\1\32\107\0"+
    "\33\32\345\0\54\32\164\0\100\32\37\0\1\32\240\0"+
    "\10\32\2\0\47\32\20\0\1\32\1\0\1\32\34\0"+
    "\1\32\12\0\50\32\7\0\1\32\25\0\1\32\13\0"+
    "\56\32\23\0\1\32\42\0\71\32\7\0\11\32\1\0"+
    "\45\32\21\0\1\32\61\0\36\32\160\0\7\32\1\0"+
    "\2\32\1\0\46\32\25\0\1\32\31\0\6\32\1\0"+
    "\2\32\1\0\40\32\16\0\1\32\u0147\0\23\32\15\0"+
    "\232\32\346\0\304\32\274\0\57\32\321\0\107\32\271\0"+
    "\71\32\7\0\37\32\161\0\36\32\22\0\60\32\20\0"+
    "\4\32\37\0\25\32\5\0\23\32\260\0\100\32\200\0"+
    "\113\32\5\0\1\32\102\0\15\32\100\0\2\32\1\0"+
    "\1\32\34\0\370\32\10\0\363\32\15\0\37\32\61\0"+
    "\3\32\21\0\4\32\10\0\u018c\32\4\0\153\32\5\0"+
    "\15\32\3\0\11\32\7\0\12\32\146\0\125\32\1\0"+
    "\107\32\1\0\2\32\2\0\1\32\2\0\2\32\2\0"+
    "\4\32\1\0\14\32\1\0\1\32\1\0\7\32\1\0"+
    "\101\32\1\0\4\32\2\0\10\32\1\0\7\32\1\0"+
    "\34\32\1\0\4\32\1\0\5\32\1\0\1\32\3\0"+
    "\7\32\1\0\u0154\32\2\0\31\32\1\0\31\32\1\0"+
    "\37\32\1\0\31\32\1\0\37\32\1\0\31\32\1\0"+
    "\37\32\1\0\31\32\1\0\37\32\1\0\31\32\1\0"+
    "\10\32\64\0\55\32\12\0\7\32\20\0\1\32\u0171\0"+
    "\54\32\24\0\305\32\73\0\104\32\7\0\1\32\264\0"+
    "\4\32\1\0\33\32\1\0\2\32\1\0\1\32\2\0"+
    "\1\32\1\0\12\32\1\0\4\32\1\0\1\32\1\0"+
    "\1\32\6\0\1\32\4\0\1\32\1\0\1\32\1\0"+
    "\1\32\1\0\3\32\1\0\2\32\1\0\1\32\2\0"+
    "\1\32\1\0\1\32\1\0\1\32\1\0\1\32\1\0"+
    "\1\32\1\0\2\32\1\0\1\32\2\0\4\32\1\0"+
    "\7\32\1\0\4\32\1\0\4\32\1\0\1\32\1\0"+
    "\12\32\1\0\21\32\5\0\3\32\1\0\5\32\1\0"+
    "\21\32\104\0\327\32\51\0\65\32\13\0\336\32\2\0"+
    "\u0182\32\16\0\u0131\32\37\0\36\32\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27648];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\15\0\1\2\6\0\1\1\1\3\4\1\1\4"+
    "\1\3\1\5\1\6\3\5\1\7\2\5\4\10\1\11"+
    "\1\12\2\13\1\14\1\15\1\14\1\13\1\16\1\13"+
    "\1\17\1\20\1\21\1\22\1\6\1\23\1\24\1\23"+
    "\1\25\1\23\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\31\1\34\1\6\3\31\1\35\1\36\2\35\1\37"+
    "\1\40\1\2\1\41\1\5\3\42\3\43\1\10\1\43"+
    "\1\44\1\45\1\46\1\47\1\45\1\50\1\51\1\52"+
    "\10\45\1\1\7\0\1\53\1\54\1\55\6\0\2\14"+
    "\1\53\1\56\1\31\1\57\1\31\2\0\1\60\4\45"+
    "\1\61\3\45\3\0\1\62\7\0\1\63\3\0\1\64"+
    "\1\0\1\65\2\14\4\45\1\66\2\45\1\0\1\67"+
    "\2\0\1\70\1\0\1\20\1\0\1\71\1\5\2\14"+
    "\2\45\1\72\1\73\1\45\1\74\4\0\1\14\1\75"+
    "\1\76\1\77\1\45\3\0\1\100\1\45\3\0\1\101"+
    "\1\0\1\63\1\0\1\102";

  private static int [] zzUnpackAction() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de"+
    "\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee"+
    "\0\u0630\0\u0672\0\u06b4\0\u05ee\0\u06f6\0\u05ee\0\u0738\0\u077a"+
    "\0\u0630\0\u07bc\0\u05ee\0\u07fe\0\u0840\0\u05ee\0\u0630\0\u0882"+
    "\0\u08c4\0\u05ee\0\u05ee\0\u05ee\0\u0630\0\u0906\0\u05ee\0\u0948"+
    "\0\u098a\0\u09cc\0\u0a0e\0\u05ee\0\u0a50\0\u05ee\0\u05ee\0\u0a92"+
    "\0\u05ee\0\u05ee\0\u0630\0\u05ee\0\u0ad4\0\u05ee\0\u05ee\0\u05ee"+
    "\0\u0b16\0\u05ee\0\u05ee\0\u0b58\0\u05ee\0\u0b9a\0\u0bdc\0\u0c1e"+
    "\0\u0c60\0\u05ee\0\u05ee\0\u0630\0\u0ca2\0\u05ee\0\u05ee\0\u0ce4"+
    "\0\u05ee\0\u0d26\0\u05ee\0\u0630\0\u0a0e\0\u05ee\0\u0630\0\u0d68"+
    "\0\u0daa\0\u0dec\0\u05ee\0\u05ee\0\u0e2e\0\u05ee\0\u0630\0\u05ee"+
    "\0\u05ee\0\u05ee\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78\0\u0fba"+
    "\0\u0ffc\0\u103e\0\u1080\0\u10c2\0\u1104\0\u1146\0\u1188\0\u11ca"+
    "\0\u120c\0\u124e\0\u1290\0\u12d2\0\u05ee\0\u077a\0\u07bc\0\u1314"+
    "\0\u1356\0\u1398\0\u13da\0\u141c\0\u145e\0\u05ee\0\u05ee\0\u14a0"+
    "\0\u05ee\0\u14e2\0\u1524\0\u1566\0\u05ee\0\u15a8\0\u15ea\0\u162c"+
    "\0\u166e\0\u0e70\0\u16b0\0\u16f2\0\u1734\0\u1776\0\u17b8\0\u17fa"+
    "\0\u05ee\0\u183c\0\u187e\0\u18c0\0\u1902\0\u1944\0\u1986\0\u19c8"+
    "\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0\0\u05ee\0\u1b12\0\u05ee\0\u1b54"+
    "\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c\0\u1c9e\0\u0e70\0\u1ce0\0\u1d22"+
    "\0\u1d64\0\u05ee\0\u1da6\0\u1de8\0\u05ee\0\u1e2a\0\u05ee\0\u1e6c"+
    "\0\u05ee\0\u1eae\0\u1ef0\0\u1f32\0\u1f74\0\u1fb6\0\u0e70\0\u0e70"+
    "\0\u1ff8\0\u0e70\0\u203a\0\u207c\0\u20be\0\u2100\0\u2142\0\u0906"+
    "\0\u0e70\0\u0e70\0\u2184\0\u21c6\0\u2208\0\u224a\0\u05ee\0\u228c"+
    "\0\u22ce\0\u2310\0\u2352\0\u0e70\0\u2394\0\u05ee\0\u23d6\0\u05ee";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\26\1\27\3\26\2\30\1\31\10\26\1\32\25\26"+
    "\1\33\30\26\1\34\1\26\1\35\1\36\1\37\2\36"+
    "\1\40\2\36\1\41\1\42\11\36\1\43\10\36\1\44"+
    "\4\36\1\45\17\36\1\44\6\36\1\45\11\36\1\37"+
    "\7\46\1\47\2\46\1\50\5\46\1\51\1\46\1\52"+
    "\22\46\1\53\34\46\1\54\1\37\5\54\1\55\6\54"+
    "\1\56\1\54\1\57\4\54\20\56\3\54\1\56\1\54"+
    "\20\56\1\60\4\56\2\54\1\37\1\54\1\37\5\54"+
    "\1\55\6\54\1\56\1\54\1\61\4\54\20\56\3\54"+
    "\1\56\1\54\25\56\2\54\1\37\1\54\1\62\5\54"+
    "\1\55\4\54\1\63\5\54\1\64\56\54\1\62\1\65"+
    "\1\37\2\65\1\54\3\65\1\54\3\65\1\63\3\65"+
    "\1\54\1\66\1\64\54\65\1\67\1\65\1\70\4\71"+
    "\1\72\2\71\1\73\1\74\35\71\1\75\2\71\1\76"+
    "\25\71\1\77\1\100\1\71\1\101\1\37\2\101\1\102"+
    "\3\101\1\103\3\101\1\104\5\101\1\64\54\101\1\105"+
    "\1\101\1\106\1\107\1\62\2\107\1\36\3\107\1\36"+
    "\3\107\1\110\5\107\1\64\54\107\1\105\1\107\1\111"+
    "\4\112\1\113\2\112\1\114\36\112\1\115\30\112\1\116"+
    "\2\112\4\71\1\113\2\71\1\73\1\74\35\71\1\75"+
    "\2\71\1\76\25\71\1\77\1\100\1\71\7\112\1\114"+
    "\1\113\35\112\1\115\30\112\1\117\2\112\4\71\1\72"+
    "\2\71\1\73\1\113\35\71\1\75\2\71\1\76\25\71"+
    "\1\77\1\100\1\71\22\120\1\121\1\122\56\120\1\123"+
    "\1\37\5\123\1\124\4\123\1\125\3\123\1\57\1\123"+
    "\1\64\56\123\1\37\7\126\1\127\2\126\1\130\12\126"+
    "\20\131\2\126\1\132\2\126\25\131\12\126\1\127\2\126"+
    "\1\130\12\126\20\131\2\126\1\133\2\126\25\131\3\126"+
    "\1\134\2\135\2\134\1\136\1\134\1\137\4\134\1\140"+
    "\1\134\1\141\5\134\1\142\54\134\1\135\1\134\2\135"+
    "\4\134\1\137\15\134\20\143\5\134\1\144\1\143\1\145"+
    "\1\146\3\143\1\147\1\150\7\143\1\151\1\152\3\143"+
    "\2\134\1\135\1\30\1\37\5\30\1\31\10\30\1\153"+
    "\60\30\1\37\1\26\1\0\3\26\3\0\10\26\1\0"+
    "\25\26\1\33\30\26\1\0\2\26\1\0\1\27\77\0"+
    "\1\27\107\0\1\154\10\0\1\155\6\0\20\155\3\0"+
    "\1\155\1\0\1\156\4\155\1\157\3\155\1\157\1\155"+
    "\1\160\2\155\1\161\6\155\6\0\1\162\10\0\1\163"+
    "\1\0\1\164\4\0\1\165\1\0\20\164\3\0\1\164"+
    "\1\0\25\164\3\0\1\26\1\0\5\26\1\0\10\26"+
    "\1\0\25\26\1\33\30\26\1\0\3\26\1\27\3\26"+
    "\3\0\10\26\1\0\25\26\1\33\30\26\1\0\1\26"+
    "\1\35\1\0\1\37\77\0\1\37\4\166\1\112\75\166"+
    "\10\167\1\112\71\167\41\0\1\170\31\0\1\170\50\0"+
    "\1\171\31\0\1\171\17\0\1\172\72\0\1\173\110\0"+
    "\2\56\1\0\2\56\6\0\20\56\3\0\1\56\1\0"+
    "\25\56\15\0\2\56\1\0\2\56\6\0\20\56\3\0"+
    "\1\56\1\0\2\56\1\174\16\56\1\175\3\56\17\0"+
    "\1\176\66\0\1\62\77\0\1\62\22\0\1\177\57\0"+
    "\1\65\1\0\2\65\1\0\3\65\1\0\3\65\1\0"+
    "\3\65\3\0\60\65\1\37\2\65\1\0\3\65\1\0"+
    "\3\65\1\0\3\65\3\0\56\65\1\70\4\0\1\71"+
    "\3\0\1\71\40\0\1\71\30\0\1\101\1\0\12\101"+
    "\1\200\5\101\1\0\54\101\1\201\3\101\1\0\12\101"+
    "\1\200\5\101\1\177\54\101\1\201\3\101\1\37\12\101"+
    "\1\200\5\101\1\0\54\101\1\201\1\101\1\106\1\107"+
    "\1\0\2\107\1\0\3\107\1\0\3\107\1\202\5\107"+
    "\1\0\54\107\1\201\16\107\1\202\5\107\1\177\60\107"+
    "\1\62\2\107\1\0\3\107\1\0\3\107\1\202\5\107"+
    "\1\0\54\107\1\201\1\107\1\111\6\0\1\112\73\0"+
    "\22\120\1\0\1\203\100\120\1\121\57\120\12\0\1\204"+
    "\70\0\1\131\1\0\1\131\3\0\1\131\1\0\1\131"+
    "\1\0\1\131\1\0\1\131\7\0\20\131\5\0\25\131"+
    "\2\0\1\131\22\0\1\205\60\0\2\135\76\0\1\135"+
    "\25\0\20\143\5\0\25\143\30\0\20\143\5\0\23\143"+
    "\1\206\1\143\30\0\20\143\5\0\1\207\24\143\30\0"+
    "\20\143\5\0\1\210\10\143\1\211\13\143\30\0\20\143"+
    "\5\0\4\143\1\212\20\143\30\0\20\143\5\0\3\143"+
    "\1\213\21\143\30\0\20\143\5\0\13\143\1\214\11\143"+
    "\30\0\20\143\5\0\6\143\1\215\16\143\17\0\1\216"+
    "\102\0\1\217\25\0\1\220\50\0\2\155\1\0\2\155"+
    "\1\221\5\0\20\155\3\0\1\155\1\0\25\155\15\0"+
    "\2\155\1\0\2\155\1\221\5\0\20\155\3\0\1\155"+
    "\1\0\12\155\1\222\2\155\1\223\7\155\15\0\2\155"+
    "\1\0\2\155\1\221\5\0\20\155\3\0\1\155\1\0"+
    "\21\155\1\224\3\155\15\0\2\155\1\0\2\155\1\221"+
    "\5\0\20\155\3\0\1\155\1\0\1\155\1\225\23\155"+
    "\15\0\2\155\1\0\2\155\1\221\5\0\20\155\3\0"+
    "\1\155\1\0\22\155\1\226\2\155\15\0\1\227\15\0"+
    "\1\230\67\0\1\231\6\0\20\231\3\0\1\231\1\0"+
    "\25\231\15\0\2\164\1\0\2\164\6\0\20\164\3\0"+
    "\1\164\1\0\25\164\41\0\1\232\25\0\1\232\43\0"+
    "\1\233\24\0\1\233\31\0\1\234\16\0\1\235\71\0"+
    "\1\236\32\0\1\237\46\0\2\56\1\0\2\56\6\0"+
    "\20\56\3\0\1\56\1\0\17\56\1\240\5\56\15\0"+
    "\2\56\1\0\2\56\6\0\20\56\3\0\1\56\1\0"+
    "\24\56\1\241\3\0\14\101\1\200\5\101\1\0\57\101"+
    "\14\107\1\202\5\107\1\0\57\107\22\120\1\0\57\120"+
    "\22\0\1\235\104\0\20\143\5\0\1\242\24\143\30\0"+
    "\20\143\5\0\21\143\1\243\3\143\30\0\20\143\5\0"+
    "\2\143\1\244\22\143\30\0\20\143\5\0\20\143\1\245"+
    "\4\143\30\0\20\143\5\0\24\143\1\246\30\0\20\143"+
    "\5\0\7\143\1\247\15\143\30\0\20\143\5\0\3\143"+
    "\1\250\21\143\75\0\1\251\24\0\1\217\1\0\1\252"+
    "\77\0\1\253\7\0\5\253\20\0\5\253\35\0\2\155"+
    "\1\0\2\155\1\221\5\0\20\155\3\0\1\155\1\0"+
    "\15\155\1\224\7\155\15\0\2\155\1\0\2\155\1\221"+
    "\5\0\20\155\3\0\1\155\1\0\14\155\1\254\10\155"+
    "\15\0\2\155\1\0\2\155\1\252\5\0\20\155\3\0"+
    "\1\155\1\0\25\155\15\0\2\155\1\0\2\155\1\221"+
    "\5\0\20\155\3\0\1\155\1\0\20\155\1\222\4\155"+
    "\15\0\2\155\1\0\2\155\1\221\5\0\20\155\3\0"+
    "\1\155\1\0\14\155\1\157\10\155\15\0\1\255\126\0"+
    "\1\256\26\0\1\256\25\0\2\231\1\0\2\231\6\0"+
    "\20\231\3\0\1\231\1\0\25\231\40\0\1\257\25\0"+
    "\1\257\53\0\1\260\25\0\1\260\40\0\1\261\71\0"+
    "\1\262\101\0\2\56\1\0\2\56\6\0\20\56\3\0"+
    "\1\56\1\0\7\56\1\263\15\56\15\0\2\56\1\0"+
    "\2\56\6\0\20\56\3\0\1\56\1\0\11\56\1\264"+
    "\13\56\30\0\20\143\5\0\7\143\1\265\15\143\30\0"+
    "\20\143\5\0\2\143\1\266\22\143\30\0\20\143\5\0"+
    "\6\143\1\267\16\143\30\0\20\143\5\0\3\143\1\270"+
    "\21\143\30\0\20\143\5\0\15\143\1\271\7\143\30\0"+
    "\20\143\5\0\13\143\1\272\11\143\57\0\1\273\16\0"+
    "\1\274\23\0\1\253\1\0\1\252\5\0\5\253\20\0"+
    "\5\253\35\0\2\155\1\0\2\155\1\221\5\0\20\155"+
    "\3\0\1\155\1\0\20\155\1\224\4\155\32\0\1\275"+
    "\24\0\1\275\61\0\1\276\24\0\1\276\32\0\1\234"+
    "\7\0\1\235\71\0\2\56\1\0\2\56\6\0\20\56"+
    "\3\0\1\56\1\0\15\56\1\277\7\56\15\0\2\56"+
    "\1\0\2\56\6\0\20\56\3\0\1\56\1\0\3\56"+
    "\1\300\21\56\30\0\20\143\5\0\21\143\1\301\3\143"+
    "\30\0\20\143\5\0\6\143\1\302\16\143\30\0\20\143"+
    "\5\0\15\143\1\303\7\143\74\0\1\304\106\0\1\305"+
    "\44\0\1\306\31\0\1\306\35\0\1\307\24\0\1\307"+
    "\37\0\2\56\1\0\2\56\6\0\20\56\3\0\1\56"+
    "\1\0\21\56\1\300\3\56\30\0\20\143\5\0\3\143"+
    "\1\310\21\143\64\0\1\311\103\0\1\312\62\0\1\313"+
    "\31\0\1\313\30\0\20\143\5\0\21\143\1\314\3\143"+
    "\72\0\1\315\67\0\1\316\64\0\1\317\26\0\1\317"+
    "\105\0\1\316\37\0\1\320\23\0\1\320\24\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[9240];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\15\0\1\1\6\0\2\1\1\11\3\1\1\11"+
    "\1\1\1\11\4\1\1\11\2\1\1\11\3\1\3\11"+
    "\2\1\1\11\4\1\1\11\1\1\2\11\1\1\2\11"+
    "\1\1\1\11\1\1\3\11\1\1\2\11\1\1\1\11"+
    "\4\1\2\11\2\1\2\11\1\1\1\11\1\1\1\11"+
    "\2\1\1\11\4\1\2\11\1\1\1\11\1\1\3\11"+
    "\11\1\7\0\2\1\1\11\6\0\2\1\2\11\1\1"+
    "\1\11\1\1\2\0\1\11\10\1\3\0\1\11\7\0"+
    "\1\1\3\0\1\11\1\0\1\11\11\1\1\0\1\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\11\11\1\4\0"+
    "\5\1\3\0\1\11\1\1\3\0\1\1\1\0\1\11"+
    "\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  private static final int NO_QUOTE = 0;
  private static final int SINGLE_QUOTE = 1;
  private static final int DOUBLE_QUOTE = 2;
  private static final int BACKQUOTE = 3;

  public int bracesNestingLevel = 0;
  public int quoteMode = NO_QUOTE;
  public int rawTag = 0;

  public _SvelteHtmlLexer() {
    this((java.io.Reader)null);
  }

  public final void yybeginNestable(int state) {
      bracesNestingLevel = 0;
      quoteMode = NO_QUOTE;
      yybegin(state);
  }

  private void toggleQuoteMode(int mode) {
    if (quoteMode == NO_QUOTE) {
      quoteMode = mode;
    } else if (quoteMode == mode) {
      quoteMode = NO_QUOTE;
    }
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _SvelteHtmlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  bracesNestingLevel = 0;
  quoteMode = NO_QUOTE;
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return XmlTokenType.XML_DATA_CHARACTERS;
            }
          // fall through
          case 67: break;
          case 2:
            { return XmlTokenType.XML_PI_TARGET;
            }
          // fall through
          case 68: break;
          case 3:
            { return XmlTokenType.XML_REAL_WHITE_SPACE;
            }
          // fall through
          case 69: break;
          case 4:
            { yybeginNestable(SVELTE_INTERPOLATION_START); return SvelteTokenTypes.START_MUSTACHE;
            }
          // fall through
          case 70: break;
          case 5:
            { return XmlTokenType.XML_BAD_CHARACTER;
            }
          // fall through
          case 71: break;
          case 6:
            { return XmlTokenType.XML_WHITE_SPACE;
            }
          // fall through
          case 72: break;
          case 7:
            { yybegin(YYINITIAL); return XmlTokenType.XML_DOCTYPE_END;
            }
          // fall through
          case 73: break;
          case 8:
            { return XmlTokenType.XML_COMMENT_CHARACTERS;
            }
          // fall through
          case 74: break;
          case 9:
            { // according to HTML spec (http://www.w3.org/html/wg/drafts/html/master/syntax.html#comments)
  // comments should start with <!-- and end with -->. The comment <!--> is not valid, but should terminate
  // comment token. Please note that it's not true for XML (http://www.w3.org/TR/REC-xml/#sec-comments)
  int loc = getTokenStart();
  char prev = zzBuffer.charAt(loc - 1);
  char prevPrev = zzBuffer.charAt(loc - 2);
  if (prev == '-' && prevPrev == '-') {
    yybegin(YYINITIAL); return XmlTokenType.XML_BAD_CHARACTER;
  }
  return XmlTokenType.XML_COMMENT_CHARACTERS;
            }
          // fall through
          case 75: break;
          case 10:
            { yybegin(C_COMMENT_START); return XmlTokenType.XML_CONDITIONAL_COMMENT_START;
            }
          // fall through
          case 76: break;
          case 11:
            { yybegin(YYINITIAL); yypushback(1); break;
            }
          // fall through
          case 77: break;
          case 12:
            { rawTag = 0; yybegin(BEFORE_TAG_ATTRIBUTES); return XmlTokenType.XML_NAME;
            }
          // fall through
          case 78: break;
          case 13:
            { return XmlTokenType.XML_START_TAG_START;
            }
          // fall through
          case 79: break;
          case 14:
            { yybegin(TAG_ATTRIBUTES); return XmlTokenType.XML_WHITE_SPACE;
            }
          // fall through
          case 80: break;
          case 15:
            { yybegin(rawTag == 1 ? RAW_CONTENT : YYINITIAL); return XmlTokenType.XML_TAG_END;
            }
          // fall through
          case 81: break;
          case 16:
            { return XmlTokenType.XML_NAME;
            }
          // fall through
          case 82: break;
          case 17:
            { yybegin(ATTRIBUTE_VALUE_START); return XmlTokenType.XML_EQ;
            }
          // fall through
          case 83: break;
          case 18:
            { yybeginNestable(ATTRIBUTE_BRACES); return SvelteTokenTypes.START_MUSTACHE;
            }
          // fall through
          case 84: break;
          case 19:
            { return SvelteTokenTypes.CODE_FRAGMENT;
            }
          // fall through
          case 85: break;
          case 20:
            { toggleQuoteMode(DOUBLE_QUOTE); return SvelteTokenTypes.CODE_FRAGMENT;
            }
          // fall through
          case 86: break;
          case 21:
            { toggleQuoteMode(SINGLE_QUOTE); return SvelteTokenTypes.CODE_FRAGMENT;
            }
          // fall through
          case 87: break;
          case 22:
            { toggleQuoteMode(BACKQUOTE); return SvelteTokenTypes.CODE_FRAGMENT;
            }
          // fall through
          case 88: break;
          case 23:
            { if (quoteMode == NO_QUOTE) { bracesNestingLevel++; } return SvelteTokenTypes.CODE_FRAGMENT;
            }
          // fall through
          case 89: break;
          case 24:
            { if (quoteMode != NO_QUOTE) { return SvelteTokenTypes.CODE_FRAGMENT; }
          if (bracesNestingLevel > 0) { bracesNestingLevel--; return SvelteTokenTypes.CODE_FRAGMENT; }

          if (yystate() == SVELTE_INTERPOLATION) yybegin(YYINITIAL);
          if (yystate() == ATTRIBUTE_BRACES) yybegin(TAG_ATTRIBUTES);
          if (yystate() == ATTRIBUTE_VALUE_BRACES) yybegin(ATTRIBUTE_VALUE_AFTER_BRACES);
          if (yystate() == ATTRIBUTE_VALUE_DQ_BRACES) yybegin(ATTRIBUTE_VALUE_DQ);
          if (yystate() == ATTRIBUTE_VALUE_SQ_BRACES) yybegin(ATTRIBUTE_VALUE_SQ);
          return SvelteTokenTypes.END_MUSTACHE;
            }
          // fall through
          case 90: break;
          case 25:
            { yybegin(TAG_ATTRIBUTES); return XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN;
            }
          // fall through
          case 91: break;
          case 26:
            { yybegin(ATTRIBUTE_VALUE_DQ); return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
            }
          // fall through
          case 92: break;
          case 27:
            { yybegin(ATTRIBUTE_VALUE_SQ); return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
            }
          // fall through
          case 93: break;
          case 28:
            { yybeginNestable(ATTRIBUTE_VALUE_BRACES); return SvelteTokenTypes.START_MUSTACHE;
            }
          // fall through
          case 94: break;
          case 29:
            { return XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN;
            }
          // fall through
          case 95: break;
          case 30:
            { yybegin(TAG_ATTRIBUTES); return XmlTokenType.XML_ATTRIBUTE_VALUE_END_DELIMITER;
            }
          // fall through
          case 96: break;
          case 31:
            { yybeginNestable(ATTRIBUTE_VALUE_DQ_BRACES); return SvelteTokenTypes.START_MUSTACHE;
            }
          // fall through
          case 97: break;
          case 32:
            { yybeginNestable(ATTRIBUTE_VALUE_SQ_BRACES); return SvelteTokenTypes.START_MUSTACHE;
            }
          // fall through
          case 98: break;
          case 33:
            { yybegin(YYINITIAL); return XmlTokenType.XML_PI_END;
            }
          // fall through
          case 99: break;
          case 34:
            { return XmlTokenType.XML_TAG_CHARACTERS;
            }
          // fall through
          case 100: break;
          case 35:
            { yybegin(COMMENT); return XmlTokenType.XML_COMMENT_CHARACTERS;
            }
          // fall through
          case 101: break;
          case 36:
            { yybegin(COMMENT); return XmlTokenType.XML_CONDITIONAL_COMMENT_END;
            }
          // fall through
          case 102: break;
          case 37:
            { yybegin(SVELTE_INTERPOLATION); yypushback(yylength());
            }
          // fall through
          case 103: break;
          case 38:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 104: break;
          case 39:
            { yybegin(SVELTE_INTERPOLATION_KEYWORD); return JSTokenTypes.SHARP;
            }
          // fall through
          case 105: break;
          case 40:
            { yybegin(SVELTE_INTERPOLATION_KEYWORD); return JSTokenTypes.DIV;
            }
          // fall through
          case 106: break;
          case 41:
            { yybegin(SVELTE_INTERPOLATION_KEYWORD); return JSTokenTypes.COLON;
            }
          // fall through
          case 107: break;
          case 42:
            { yybegin(SVELTE_INTERPOLATION_KEYWORD); return JSTokenTypes.AT;
            }
          // fall through
          case 108: break;
          case 43:
            { return XmlTokenType.XML_END_TAG_START;
            }
          // fall through
          case 109: break;
          case 44:
            { yybegin(START_TAG_NAME); yypushback(yylength());
            }
          // fall through
          case 110: break;
          case 45:
            { yybegin(PROCESSING_INSTRUCTION); return XmlTokenType.XML_PI_START;
            }
          // fall through
          case 111: break;
          case 46:
            { rawTag = 0; yybegin(YYINITIAL); return XmlTokenType.XML_EMPTY_ELEMENT_END;
            }
          // fall through
          case 112: break;
          case 47:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { return XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN;
            }
          // fall through
          case 113: break;
          case 48:
            { yybegin(COMMENT); return XmlTokenType.XML_CONDITIONAL_COMMENT_START_END;
            }
          // fall through
          case 114: break;
          case 49:
            { yybegin(SVELTE_INTERPOLATION); return SvelteTokenTypes.IF_KEYWORD;
            }
          // fall through
          case 115: break;
          case 50:
            { return XmlTokenType.XML_ENTITY_REF_TOKEN;
            }
          // fall through
          case 116: break;
          case 51:
            { yybegin(END_TAG_NAME); yypushback(yylength());
            }
          // fall through
          case 117: break;
          case 52:
            { yybegin(YYINITIAL); return XmlTokenType.XML_COMMENT_END;
            }
          // fall through
          case 118: break;
          case 53:
            { yybegin(C_COMMENT_END); return XmlTokenType.XML_CONDITIONAL_COMMENT_END_START;
            }
          // fall through
          case 119: break;
          case 54:
            { yybegin(SVELTE_INTERPOLATION); return SvelteTokenTypes.KEY_KEYWORD;
            }
          // fall through
          case 120: break;
          case 55:
            { return XmlTokenType.XML_CHAR_ENTITY_REF;
            }
          // fall through
          case 121: break;
          case 56:
            { yybegin(COMMENT); return XmlTokenType.XML_COMMENT_START;
            }
          // fall through
          case 122: break;
          case 57:
            { yybegin(YYINITIAL); return XmlTokenType.XML_BAD_CHARACTER;
            }
          // fall through
          case 123: break;
          case 58:
            { yybegin(SVELTE_INTERPOLATION); return SvelteTokenTypes.EACH_KEYWORD;
            }
          // fall through
          case 124: break;
          case 59:
            { yybegin(SVELTE_INTERPOLATION); return SvelteTokenTypes.ELSE_KEYWORD;
            }
          // fall through
          case 125: break;
          case 60:
            { yybegin(SVELTE_INTERPOLATION); return SvelteTokenTypes.THEN_KEYWORD;
            }
          // fall through
          case 126: break;
          case 61:
            { rawTag = 1; yybegin(BEFORE_TAG_ATTRIBUTES); return XmlTokenType.XML_NAME;
            }
          // fall through
          case 127: break;
          case 62:
            { yybegin(SVELTE_INTERPOLATION); return SvelteTokenTypes.AWAIT_KEYWORD;
            }
          // fall through
          case 128: break;
          case 63:
            { yybegin(SVELTE_INTERPOLATION); return SvelteTokenTypes.CATCH_KEYWORD;
            }
          // fall through
          case 129: break;
          case 64:
            { return XmlTokenType.XML_DOCTYPE_PUBLIC;
            }
          // fall through
          case 130: break;
          case 65:
            { yybegin(SVELTE_INTERPOLATION); return SvelteTokenTypes.SNIPPET_KEYWORD;
            }
          // fall through
          case 131: break;
          case 66:
            { yybegin(DOC_TYPE); return XmlTokenType.XML_DOCTYPE_START;
            }
          // fall through
          case 132: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
